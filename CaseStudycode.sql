--To have alook of our dataset
SELECT*
FROM CASE_STUDY.BRIGHT_COFFEE_SHOP.SALES;

---BELOW WE ARE PERFORMING EXPLORATORY DATA ANALYSIS--

----To check the time when the shop will be opening
SELECT MIN(TRANSACTION_TIME) AS Shop_opening_time
FROM CASE_STUDY.BRIGHT_COFFEE_SHOP.SALES;

----To check the time when the shop will be closing
SELECT MAX(TRANSACTION_TIME) AS Shop_closing_time
FROM CASE_STUDY.BRIGHT_COFFEE_SHOP.SALES;

----To check the date when the shop started operating
SELECT MIN(TRANSACTION_DATE) AS Shop_opening_date
FROM CASE_STUDY.BRIGHT_COFFEE_SHOP.SALES;

----To check the curent date since the shop started operating
SELECT Max(TRANSACTION_DATE) AS Shop_current_date
FROM CASE_STUDY.BRIGHT_COFFEE_SHOP.SALES;

--- To check the different store locations
SELECT DISTINCT(STORE_LOCATION) AS Different_store_location
FROM CASE_STUDY.BRIGHT_COFFEE_SHOP.SALES;

--- To check the different product category
SELECT DISTINCT(product_category) AS Different_product_categories
FROM CASE_STUDY.BRIGHT_COFFEE_SHOP.SALES;

--- Determine the number of times each product was sold
SELECT product_id ,
       COUNT(*) AS TIMES_SOLD,
FROM CASE_STUDY.BRIGHT_COFFEE_SHOP.SALES
GROUP BY PRODUCT_ID
HAVING COUNT(*) > 1;

--- To check the different products types
SELECT DISTINCT(product_type) AS Different_product_types
FROM CASE_STUDY.BRIGHT_COFFEE_SHOP.SALES;

--------------------------------------------------------------------------------------------------------------------------

----QUERYING OUR DATASET

SELECT TRANSACTION_DATE,
MONTHNAME (TRANSACTION_DATE) AS MONTH,
DAYNAME (TRANSACTION_DATE)AS DAY_NAME,
CASE WHEN DAY_NAME NOT IN ('Sat','Sun') THEN 'WEEKDAY'
ELSE 'WEEKEND'
END AS DAY_CLASSIFICATIONS,
TRANSACTION_TIME,
CASE 
    WHEN TRANSACTION_TIME BETWEEN '06:00:00' AND '11:59:59' THEN 'MORNING'
    WHEN TRANSACTION_TIME BETWEEN '12:00:00' AND '16:59:59' THEN 'AFTERNOON'
    WHEN TRANSACTION_TIME BETWEEN '17:00:00' AND '20:59:59' THEN 'EVENING'
ELSE 'NIGHT'
END AS Times_of_the_day,
HOUR (TRANSACTION_TIME)AS HOUR_OF_DAY,
TRANSACTION_ID,
COUNT (TRANSACTION_ID)AS TOTAL_NUMBER_OF_SALES,
TRANSACTION_QTY,
STORE_ID,
STORE_LOCATION,
PRODUCT_ID,
COUNT(PRODUCT_ID) AS TOTAL_NUMBER_OF_PRODUCT_SOLD,
PRODUCT_CATEGORY,
PRODUCT_DETAIL,
PRODUCT_TYPE,
UNIT_PRICE,
TRANSACTION_QTY*UNIT_PRICE AS REVENUE,
FROM CASE_STUDY.BRIGHT_COFFEE_SHOP.SALES
GROUP BY ALL;

